(*testing.T)({
  common: (testing.common) {
    mu: (sync.RWMutex) {
      w: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      writerSem: (uint32) 0,
      readerSem: (uint32) 0,
      readerCount: (atomic.Int32) {
        _: (atomic.noCopy) {
        },
        v: (int32) 0
      },
      readerWait: (atomic.Int32) {
        _: (atomic.noCopy) {
        },
        v: (int32) 0
      }
    },
    output: ([]uint8) <nil>,
    w: (testing.indenter) {
      c: (*testing.common)(<already shown>)
    },
    ran: (bool) false,
    failed: (bool) false,
    skipped: (bool) false,
    done: (bool) false,
    helperPCs: (map[uintptr]struct {}) <nil>,
    helperNames: (map[string]struct {}) <nil>,
    cleanups: ([]func()) <nil>,
    cleanupName: (string) "",
    cleanupPc: ([]uintptr) <nil>,
    finished: (bool) false,
    inFuzzFn: (bool) false,
    chatty: (*testing.chattyPrinter)({
      w: (*os.File)({
        file: (*os.file)({
          pfd: (poll.FD) {
            fdmu: (poll.fdMutex) {
              state: (uint64) 0,
              rsema: (uint32) 0,
              wsema: (uint32) 0
            },
            Sysfd: (int) 1,
            SysFile: (poll.SysFile) {
              iovecs: (*[]syscall.Iovec)(<nil>)
            },
            pd: (poll.pollDesc) {
              runtimeCtx: (uintptr) <nil>
            },
            csema: (uint32) 0,
            isBlocking: (uint32) 1,
            IsStream: (bool) true,
            ZeroReadIsEOF: (bool) true,
            isFile: (bool) true
          },
          name: (string) (len=11) "/dev/stdout",
          dirinfo: (atomic.Pointer[os.dirInfo]) {
            _: ([0]*os.dirInfo) {
            },
            _: (atomic.noCopy) {
            },
            v: (unsafe.Pointer) <nil>
          },
          nonblock: (bool) false,
          stdoutOrErr: (bool) true,
          appendMode: (bool) false
        })
      }),
      lastNameMu: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      lastName: (string) (len=19) "TestMurmur2CF_Sum32",
      json: (bool) true
    }),
    bench: (bool) false,
    hasSub: (atomic.Bool) {
      _: (atomic.noCopy) {
      },
      v: (uint32) 0
    },
    cleanupStarted: (atomic.Bool) {
      _: (atomic.noCopy) {
      },
      v: (uint32) 0
    },
    runner: (string) (len=15) "testing.tRunner",
    isParallel: (bool) false,
    parent: (*testing.common)({
      mu: (sync.RWMutex) {
        w: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        writerSem: (uint32) 0,
        readerSem: (uint32) 0,
        readerCount: (atomic.Int32) {
          _: (atomic.noCopy) {
          },
          v: (int32) 0
        },
        readerWait: (atomic.Int32) {
          _: (atomic.noCopy) {
          },
          v: (int32) 0
        }
      },
      output: ([]uint8) <nil>,
      w: (*os.File)({
        file: (*os.file)({
          pfd: (poll.FD) {
            fdmu: (poll.fdMutex) {
              state: (uint64) 0,
              rsema: (uint32) 0,
              wsema: (uint32) 0
            },
            Sysfd: (int) 1,
            SysFile: (poll.SysFile) {
              iovecs: (*[]syscall.Iovec)(<nil>)
            },
            pd: (poll.pollDesc) {
              runtimeCtx: (uintptr) <nil>
            },
            csema: (uint32) 0,
            isBlocking: (uint32) 1,
            IsStream: (bool) true,
            ZeroReadIsEOF: (bool) true,
            isFile: (bool) true
          },
          name: (string) (len=11) "/dev/stdout",
          dirinfo: (atomic.Pointer[os.dirInfo]) {
            _: ([0]*os.dirInfo) {
            },
            _: (atomic.noCopy) {
            },
            v: (unsafe.Pointer) <nil>
          },
          nonblock: (bool) false,
          stdoutOrErr: (bool) true,
          appendMode: (bool) false
        })
      }),
      ran: (bool) true,
      failed: (bool) false,
      skipped: (bool) false,
      done: (bool) false,
      helperPCs: (map[uintptr]struct {}) <nil>,
      helperNames: (map[string]struct {}) <nil>,
      cleanups: ([]func()) <nil>,
      cleanupName: (string) "",
      cleanupPc: ([]uintptr) <nil>,
      finished: (bool) false,
      inFuzzFn: (bool) false,
      chatty: (*testing.chattyPrinter)({
        w: (*os.File)({
          file: (*os.file)({
            pfd: (poll.FD) {
              fdmu: (poll.fdMutex) {
                state: (uint64) 0,
                rsema: (uint32) 0,
                wsema: (uint32) 0
              },
              Sysfd: (int) 1,
              SysFile: (poll.SysFile) {
                iovecs: (*[]syscall.Iovec)(<nil>)
              },
              pd: (poll.pollDesc) {
                runtimeCtx: (uintptr) <nil>
              },
              csema: (uint32) 0,
              isBlocking: (uint32) 1,
              IsStream: (bool) true,
              ZeroReadIsEOF: (bool) true,
              isFile: (bool) true
            },
            name: (string) (len=11) "/dev/stdout",
            dirinfo: (atomic.Pointer[os.dirInfo]) {
              _: ([0]*os.dirInfo) {
              },
              _: (atomic.noCopy) {
              },
              v: (unsafe.Pointer) <nil>
            },
            nonblock: (bool) false,
            stdoutOrErr: (bool) true,
            appendMode: (bool) false
          })
        }),
        lastNameMu: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        lastName: (string) (len=19) "TestMurmur2CF_Sum32",
        json: (bool) true
      }),
      bench: (bool) false,
      hasSub: (atomic.Bool) {
        _: (atomic.noCopy) {
        },
        v: (uint32) 1
      },
      cleanupStarted: (atomic.Bool) {
        _: (atomic.noCopy) {
        },
        v: (uint32) 0
      },
      runner: (string) (len=15) "testing.tRunner",
      isParallel: (bool) false,
      parent: (*testing.common)(<nil>),
      level: (int) 0,
      creator: ([]uintptr) <nil>,
      name: (string) "",
      start: (testing.highPrecisionTime) {
        now: (time.Time) 2025-05-03 20:11:54.055538 -0400 EDT m=+0.000404251
      },
      duration: (time.Duration) 0s,
      barrier: (chan bool) 0x14000100380,
      signal: (chan bool) 0x14000100310,
      sub: ([]*testing.T) <nil>,
      lastRaceErrors: (atomic.Int64) {
        _: (atomic.noCopy) {
        },
        _: (atomic.align64) {
        },
        v: (int64) 0
      },
      raceErrorLogged: (atomic.Bool) {
        _: (atomic.noCopy) {
        },
        v: (uint32) 0
      },
      tempDirMu: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      tempDir: (string) "",
      tempDirErr: (error) <nil>,
      tempDirSeq: (int32) 0
    }),
    level: (int) 1,
    creator: ([]uintptr) (len=7) {
      (uintptr) 0x104fdee90,
      (uintptr) 0x104fdc1c4,
      (uintptr) 0x104fded8c,
      (uintptr) 0x104fddad8,
      (uintptr) 0x105028740,
      (uintptr) 0x104f40178,
      (uintptr) 0x104f7cd14
    },
    name: (string) (len=19) "TestMurmur2CF_Sum32",
    start: (testing.highPrecisionTime) {
      now: (time.Time) 2025-05-03 20:11:54.058046 -0400 EDT m=+0.002911792
    },
    duration: (time.Duration) 0s,
    barrier: (chan bool) 0x140001009a0,
    signal: (chan bool) 0x14000100a10,
    sub: ([]*testing.T) <nil>,
    lastRaceErrors: (atomic.Int64) {
      _: (atomic.noCopy) {
      },
      _: (atomic.align64) {
      },
      v: (int64) 0
    },
    raceErrorLogged: (atomic.Bool) {
      _: (atomic.noCopy) {
      },
      v: (uint32) 0
    },
    tempDirMu: (sync.Mutex) {
      state: (int32) 0,
      sema: (uint32) 0
    },
    tempDir: (string) "",
    tempDirErr: (error) <nil>,
    tempDirSeq: (int32) 0
  },
  isEnvSet: (bool) false,
  context: (*testing.testContext)({
    match: (*testing.matcher)({
      filter: (testing.simpleMatch) {
      },
      skip: (testing.alternationMatch) {
      },
      matchFunc: (func(string, string) (bool, error)) 0x104fe0bb0,
      mu: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      subNames: (map[string]int32) {
      }
    }),
    deadline: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
    isFuzzing: (bool) false,
    mu: (sync.Mutex) {
      state: (int32) 0,
      sema: (uint32) 0
    },
    startParallel: (chan bool) 0x140001002a0,
    running: (int) 1,
    numWaiting: (int) 0,
    maxParallel: (int) 8
  })
})
(uint32) 1540447798
